Adicionando navegações no Angular

Criando rotas para a aplicação.
-> Primeiro é necessário importar os componentes para dentro de app.routes.
e utilizar o componente RouterOutlat que é o roteador da aplicação, ou seja,
onde este componente estiver é onde as páginas vão aparecer. E também 
adicionar o componente RouterLink 

_________________________________________________________________

Implementando bibliotecas para melhorar o design e ajudar do desenvolvimento

-> @angular/flex-layout 
-> uuid

_________________________________________________________________
LocalStorage e SessionStorage:
- São dois mecanismos de armazenamento no lado do cliente (navegador),
que permite armazenar dados como pares de chave-valor. Ambos fazem parte 
da API WebStorage.

-> LocalStorage: 
1- Os dados persistem mesmo após o navegador ser fechado ou reaberto
2- Acessível em todas as abas/janelas do mesmo domínio
3- geralmente 5MB por domínio 
4- os dados permanecem até serem explicitamente removidos

-> SessionStorage:
1- Os dados são mantidos apenas durante a sessão da aba/janela
2- Acessível apenas na Aba/janela onde foi criado 
3- geralmente 5MB por domínio
4- os dados são removidos quando a aba/janela é fechada
_________________________________________________________________

-> Máscaras para os campos.
adicionar a biblioteca: ngx-mask.

1. Importar no componente a ser utilizado:
- import { NgxMaskDirective, provideNgxMask } from 'ngx-mask';

NgxMaskDirective:
Diretiva principal do pacote que é aplicado aos elementos de input para habilitar máscaras.

provideNgxMask:
Esta é uma função que fornece os provedores necessários para configurar o ngx-mask na aplicação Angular.
providers: [
    provideNgxMask()
  ],
_________________________________________________________________

-> Mensagens de Feedback na aplicação.

Utilizando Snack-bar do Angular Material

_________________________________________________________________

-> (iniciando) Integração com API (Importante!!!)

1- Configurar a aplicação para que consiga fazer requisições para uma API.

- No app.config.ts:

. importar o Http Client(Cliente http).
import { provideHttpClient, withFetch } from '@angular/common/http';

-> provideHttpClient:
Função que fornece o HttpClient para a aplicação Angular. Substitui a maneira mais antiga de importar 
o HttpClientModule (em aplicações mais novas que usam standalone components).

Características:
É a forma moderna (a partir do Angular v15+) de configurar o HttpClient

Usada principalmente em aplicações que utilizam standalone components

Fornece todos os serviços necessários para fazer requisições HTTP

Pode ser combinada com "features" como withFetch para configuração adicional

-> withFetch:
Esta é uma função que configura o HttpClient para usar a API Fetch em vez do XMLHttpRequest padrão.

Características:
Substitui o mecanismo padrão de requisições HTTP do Angular (XHR) pelo Fetch API

Pode melhorar o desempenho em alguns cenários

Oferece um comportamento mais moderno e consistente com as APIs web atuais

É opcional - você só precisa usá-lo se quiser especificamente o Fetch em vez do XHR





